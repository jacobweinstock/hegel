// Code generated by MockGen. DO NOT EDIT.
// Source: internal/backend/kubernetes/backend.go

// Package kubernetes is a generated GoMock package.
package kubernetes

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MocklisterClient is a mock of listerClient interface.
type MocklisterClient struct {
	ctrl     *gomock.Controller
	recorder *MocklisterClientMockRecorder
}

// MocklisterClientMockRecorder is the mock recorder for MocklisterClient.
type MocklisterClientMockRecorder struct {
	mock *MocklisterClient
}

// NewMocklisterClient creates a new mock instance.
func NewMocklisterClient(ctrl *gomock.Controller) *MocklisterClient {
	mock := &MocklisterClient{ctrl: ctrl}
	mock.recorder = &MocklisterClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocklisterClient) EXPECT() *MocklisterClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MocklisterClient) Get(ctx context.Context, key client.ObjectKey, obj client.Object, opts ...client.GetOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MocklisterClientMockRecorder) Get(ctx, key, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MocklisterClient)(nil).Get), varargs...)
}

// List mocks base method.
func (m *MocklisterClient) List(ctx context.Context, list client.ObjectList, opts ...client.ListOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, list}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// List indicates an expected call of List.
func (mr *MocklisterClientMockRecorder) List(ctx, list interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, list}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MocklisterClient)(nil).List), varargs...)
}
